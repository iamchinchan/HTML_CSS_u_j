course notes, codes and FAQ's: https://github.com/jonasschmedtmann/html-css-course
vs code editor set up for this course:  https://github.com/jonasschmedtmann/html-css-course/blob/master/vscode-setup.md
resources page: https://codingheroes.io/resources/

dynamic websites: files sent from server to browser are first generated by application running on server

index.html: index is default name for the 1st page of any website so(entry point to any website),
every websiite must have 1 index.html to start with

semantics: having meaning

css describes the visual style and presentation of the content written in HTML.

a css rule: selector + declaration block
declaration block = many declarations
declaration/style: property and value ended with ;

seperation of concerns: keeping html and css different not entangled (so no use of inline css), and by use of internal /external css
index.html name cant be changed for 1st page, but we can name anything for a css file, as long as we are connecting it to the html file's head presentation

list selectors(h1,p,...), descendant selector (footer p: p inside of the footer)

rgba: alpha or transparency

hsl?

border: border-width, border-style, border-colors

pseudo classes: li:first-child  -> this will select all the li which are first child of their parents
li:nth-child(2)/(odd)
{
declaration;
}

text-decoration property is also short hand property: multi value :-> name, style, color

active pseudo class: duration of click

default style is represented as "user agent stylesheet" in chrome developer tools

declarations marked !important >inline style>id>class or pseudo class > element >* (univesal selector) > innherited styles(text styles are inherited mainly): closest inherited one are apllied

border-top is not inherited

universal selector * and body{} are diff as declaratoions in body will be inherited to all his
childrens and will be overwritten if same style is given a another value by any other
method as inherited styles has lowest priority.

and on the other hand *(universal selector) will be applied to all the elements
without any inheritence and is still will have more priority then inherited
styles for same properties applying on the element, but will have less priority then any other selection method

so if any non text property is styled both in body(element selector) and universal selector for ex: border-top property, then body 1 will be applied not the universal 1,
but in the casr of properties like color, if it has been styled in *, body, element level for ex: then 
element level will be applied thrn for those elements whoch do not have element level css style for property color
then all tes texts in some elements inside body will be colored acc to *(universal)
but if text is directly placed inside body without any futher body's child element then it will colored
acc to body declaration for color property

inline boxes and block level boxes/elements

block level elements: header, main, body,, h1-h6, ul, ol, li, p, div, aside, nav, section, footer
inline level elements: img, a, em, strong, b, button

on inline elements: height and width does not apply, and padding, margins only applied only horizontally(left and right):
in padding it expands element area by giving it the desired padding but does not inc parents dimensions,\
so kind of overflow if bg is applied, so left and right padding does get applied but not as usual.


margin collapse during vertical margins, not sure of horizontal margins(in horizontal i dont think they collapse)
margin collapse work on vertical level only ofc on block, there is no along side horizontal
element to check collapse with ofc
and margin collapse does not work on inline and inline-block in horizontal level and vertical level

inline-block: mix of both -> box model appies acc to block type,and visually looks like inline,
no line breaks and only occupies space acc to its content.

we can chain pseudo classes

positioning modes: 
normal flow-> relative position, according to html code
absolute positioning-> 

pseudo element selector-> ::, firstline, first letter, before, after : there are like inline elements-> better to make int inline block
adjacent element selector-> adjacent sibling selector : very next element code: +

after pseudo element:  last child in resp to which we define it
and before : first child instead

floats:

floated elements can be given margin around them
collapsing elements: due to float property. -> clear fix hack for clearing floats

looks like: with floats, margin does not get collapsed (not 100per sure,but looke the case when i tried.
)

clearing floats only works on block level elements, so for pseudo elemts created by :: after,
we should make them inline block or block box type:p refer block type.

layout: visual structure->  arranging content on page
page layout, component layout

floats:
left, right
clearfix hack: using pseudo element
clear:both;

flexbox: for 1 d layouts, compatible with 2d layouts using grids
display: flex;
gap
align-items
justify-content:
flex-direction:
flex-wrap:
align-content:advamce for multiple lines, when wrap is on using flex-wrap: wrap;
align-self:
flex-grow:
flex-shrink:
flex-basis:
flex:
order:

CSS Grid: for 2-d layouts
display: grid;
grid-template-columns:px/auto/fr, repeat(num,px/auto/fr)
grid-template-rows:
gap:
row-gap:
column-gap:
justify-content: tracks inside container
align-content:

justify-items: to pos'n grid items inside grid cells
align-items:

justify-self: overwrite justify-items
align-self: overwrite align-items

grid-column: 1/-1,  1/ 4,  3/ span 3, 5
grid:row:

/////////////////////////////////////////////////////////////

Design rules and framework:

few more html elements:

section: have semantics
span: just like div but an inline element, having no meaning attached to it
blockquote: for quotes, for ex: testimonials
figure: semantic in nature

some imp things while designs:

typography, whitespace, colors, visual hierarchy, images/illustrations, icons, shadows, border-radius , UI, components/layouts

color choice:
main color, accent color(tools: palleton.com coolers), grey color
and then we should have tins and shades:  tins and shade generator tools

find imagws for websites on : 

unsplash, pexels, Drawkit, unDraw

for compressing images: squoosh

icons: phosphor icons, ionicons, icons8, heroicons
always use icon fonts or svg's which are easily scalable.


steal like an artist from example these websites: awwwards, land-book, one page website inspiration , screenlane(for individual components)
a good start up website example: orizon



html tables:

<table>
<tr>
<td>
<th>
<thead>
<tbody>

in CSS: we also have AND selecto without space
.class1.class2{

}
so something like this meaning element having both the classes must get this styling

css property: 
transform: scale to scale anything related to element's own size
/ translate(x,y) related ot element's own size

vh: veiwport height
vw: viewport width

Rubik font , Inter font from google fonts
backlground-image: loner-gradient(to side, c1,c2): on top , another back :2nd img to be considered (to stock up images)

b-i: url(iamge path);
background-size:cover; : to give b-i size according to element its being applied to.

html element: menu 
diff between nav and menu: nac are used for navingatin in the pages of a website
and menu are for actual functionalities of the web app

main html element: for main content of the web site /app

aside element: fo radditional information 

height of the body html element is not equal to viewport's heoght but is equal to the content inside of it

on button html elements , color proprty does not get inherited from its parent(in which button is present)

buttons are like text elements and are inline-block element by default, so text-align property: center will alo be applied to them
but specifying specifically display:inline-block prioperty on it will work fine 

in display:flex , if we do magin-left :autop then that element will get left margin having remaining free space in the flex container.


CSS property: 
how elements that don't fit into the container should appears?
overflow: hidden/scroll

flex-shrink is default 1 which is on
and flex-gap is 0 which is off

SEO: search engne optimization

responsive web designs: 

use of rem instead of px and max-width instead of width

fluid layouts
flexible images: use % or vh/vw


diff btw section and article in HTML:

Sections are for generic parts of document.
and Articles are more self contained

diff btw anchor and buttons:

<a> are used to go to another on somewhere else in dame page so for manily navigation purpose, and buttons are used for action purposes, can be used for menu's to perform particular functionality.

html entites: &npsp;  :non brwaking space
&rarr;
&darr; : down array

Vs code shows a tool tip for more info on the word/element/property


animation:
transition: all/ property time(1ms , 1s exmaples) , animation type

helper classes: !important should mark imp

box-shadow: inset 0 0 0 x rem/px color;
inset: for adding shadow inside of the element , and not outside otherwise it will try to change entrire layout while hovering on the element

on images:

we can use:
filter: grayscsle/ brightness
we have opacity
and masny properties to change how image looks in our website


nice trick for links:

text-decoration: none;
  padding-bottom: 0.2rem;
  border-bottom: 1.2px solid currentColor; // for same color as element

.link:hover,
.link:active {
  color: #cf711f;
  border-bottom: 1px solid transparent;
  /* border: none; */ dont use this
}

inset hack:
box-shadow: inset 0 0 0 0.1rem #cf711f;

we can also use translateY/X other than just translate:

transform: translateY(-1.2rem);

to style hr elelement:

.featured-bar {
  border: 0;
  height: 2px;
  /* color: #e67e22; */
  background: #e67e22;
}


figure element in HTML:

used for self contained Content mostly which have captions.
can be used for diagragms, photos, code listings

blockquote element is used for representing quote, things someone else said,
for product reviews, for blog posts,
or when we want to quote someone in the content of the article.

we can use figcaption html element inside of a figure element to give something a caption

:not(:last-child),  not pseudo class